;;; LISP INTERPRETER
;;; NILS M HOLM, 2019, 2020
;;;
;;; IN THE PUBLIC DOMAIN
;;; (CC0 APPLIES WHEN THERE IS NO PUBLIC DOMAIN)
;;;
;;; LOOSELY BASED ON
;;; JOHN MCCARTHY'S MICRO MANUAL FOR LISP,
;;; HOPL II PROCEEDINGS, 1978

(SETQ BINDING
  (LAMBDA (X E)
    (COND ((EQ NIL E) NIL)
          ((EQ X (CAAR E))
            (CAR E))
          (T (BINDING X (CDR E))))))

(SETQ LOOKUP
  (LAMBDA (X E)
    (LABEL ((B (BINDING X E)))
      (COND (B (CADR B))
            (T (LABEL ((B (BINDING X ENV)))
                 (COND (B (CADR B)))))))))

(SETQ EVPROG
  (LAMBDA (P E OE)
    (COND ((EQ P NIL))
          ((EQ NIL (CDR P))
            (EVAL3 (CAR P) E OE))
          (T (EVAL3 (CAR P) E E)
             (EVPROG (CDR P) E OE)))))

(SETQ EVCON
  (LAMBDA (C E OE)
    (SETQ EVCON-TMP (EVAL3 (CAAR C) E E))
    (COND ((EQ NIL C) NIL)
          (EVCON-TMP
            (COND ((EQ NIL (CDAR C)) EVCON-TMP)
                  (T (EVPROG (CDAR C) E OE))))
          (T (EVCON (CDR C) E OE)))))

(SETQ BIND
  (LAMBDA (V A E OE)
    (COND ((EQ V NIL) OE)
          ((ATOM V)
            (CONS (LIST V (MAPCAR
                            (LAMBDA (X)
                              (EVAL3 X E E))
                            A))
                  OE))
          (T (CONS (LIST (CAR V)
                         (EVAL3 (CAR A) E E))
                   (BIND (CDR V) (CDR A) E OE))))))

(SETQ BINDSEQ
  (LAMBDA (B E)
    (COND ((EQ B NIL) E)
          (T (BINDSEQ
               (CDR B)
               (CONS (LIST (CAAR B)
                           (EVAL3 (CADAR B) E E))
                     E))))))

(SETQ MODIFY
  (LAMBDA (V X E)
    (LABEL
      ((B (BINDING V E)))
      (COND (B (RPLACA (CDR B) X))
            (T (LABEL
                 ((B (BINDING V ENV)))
                 (COND (B (RPLACA (CDR B) X))
                       (T (SETQ ENV
                                (NCONC (LIST (LIST V X))
                                       ENV))))))))
    V))

(SETQ SAVE (LAMBDA () (*DUMP (QUOTE LISINT))))

(SETQ EVAL3
  (LAMBDA (X E OE)
    (COND ((EQ X T) T)
          ((ATOM X)
             (LOOKUP X E))
          ((ATOM (CAR X))
            (COND ((EQ (CAR X) (QUOTE QUOTE))
                    (CADR X))
                  ((EQ (CAR X) (QUOTE ATOM))
                    (ATOM (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE EQ))
                    (EQ (EVAL3 (CADR X) E E)
                        (EVAL3 (CADR (CDR X)) E E)))
                  ((EQ (CAR X) (QUOTE CAR))
                    (CAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDR))
                    (CDR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CAAR))
                    (CAAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CADR))
                    (CADR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDAR))
                    (CDAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CAAAR))
                    (CAAAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CAADR))
                    (CAADR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CADAR))
                    (CADAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CADDR))
                    (CADDR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDAAR))
                    (CDAAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDADR))
                    (CDADR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDDAR))
                    (CDDAR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CDDDR))
                    (CDDDR (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE CONS))
                    (CONS (EVAL3 (CADR X) E E)
                          (EVAL3 (CADR (CDR X)) E E)))
                  ((EQ (CAR X) (QUOTE NOT))
                    (EQ (EVAL3 (CADR X) E E) NIL))
                  ((EQ (CAR X) (QUOTE NULL))
                    (EQ (EVAL3 (CADR X) E E) NIL))
                  ((EQ (CAR X) (QUOTE RPLACA))
                    (RPLACA (EVAL3 (CADR X) E E)
                            (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE RPLACD))
                    (RPLACD (EVAL3 (CADR X) E E)
                            (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE REVERSE))
                    (REVERSE (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE NREVERSE))
                    (NREVERSE (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE APPEND))
                    (APPEND (EVAL3 (CADR X) E E)
                            (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE NCONC))
                    (NCONC (EVAL3 (CADR X) E E)
                           (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE EQUAL))
                    (EQUAL (EVAL3 (CADR X) E E)
                           (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE MEMBER))
                    (MEMBER (EVAL3 (CADR X) E E)
                            (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE ASSOC))
                    (ASSOC (EVAL3 (CADR X) E E)
                           (EVAL3 (CADDR X) E E)))
                  ((EQ (CAR X) (QUOTE IMPLODE))
                    (IMPLODE (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE EXPLODE))
                    (EXPLODE (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE COND))
                    (EVCON (CDR X) E E))
                  ((EQ (CAR X) (QUOTE PROGN))
                    (EVPROG (CDR X) E E))
                  ((EQ (CAR X) (QUOTE LABEL))
                    ((LAMBDA (NE)
                       (EVPROG (CDDR X) NE NE))
                     (BINDSEQ (CADR X) E)))
                  ((EQ (CAR X) (QUOTE PRIN1))
                    (PRIN1 (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE PRINT))
                    (PRINT (EVAL3 (CADR X) E E)))
                  ((EQ (CAR X) (QUOTE TERPRI))
                    (TERPRI))
                  ((EQ (CAR X) (QUOTE READ))
                    (READ))
                  ((EQ (CAR X) (QUOTE SETQ))
                    (MODIFY (CADR X) (EVAL3 (CADDR X) E E) E))
                  ((EQ (CAR X) (QUOTE SAVE))
                    (SAVE))
                  ((EQ (CAR X) (QUOTE LAMBDA))
                    (CONS (QUOTE *LAMBDA) (CDR X)))
                  ((EQ NIL (CAR X))
                    (QUOTE *UNDEFINED))
                  (T (EVAL3 (CONS (EVAL3 (CAR X) E E)
                                  (CDR X))
                            E OE))))
          ((EQ (CAAR X) (QUOTE *LAMBDA))
            (EVPROG (CDDAR X)
                    (BIND (CADAR X) (CDR X) E OE)
                    OE))
          ((EQ (CAAR X) (QUOTE LAMBDA))
            ((LAMBDA (NE)
               (EVPROG (CDDAR X) NE NE))
             (BIND (CADAR X) (CDR X) E E))))))

(SETQ EVAL (LAMBDA (X) (EVAL3 X NIL NIL)))

(SETQ ENV (QUOTE
  ((ATOM (*LAMBDA (X) (ATOM X)))
   (EQ (*LAMBDA (X Y) (EQ X Y)))
   (CAR (*LAMBDA (X) (CAR X)))
   (CDR (*LAMBDA (X) (CDR X)))
   (CAAR (*LAMBDA (X) (CAAR X)))
   (CADR (*LAMBDA (X) (CADR X)))
   (CDAR (*LAMBDA (X) (CDAR X)))
   (CAAAR (*LAMBDA (X) (CAAAR X)))
   (CAADR (*LAMBDA (X) (CAADR X)))
   (CADAR (*LAMBDA (X) (CADAR X)))
   (CADDR (*LAMBDA (X) (CADDR X)))
   (CDAAR (*LAMBDA (X) (CDAAR X)))
   (CDADR (*LAMBDA (X) (CDADR X)))
   (CDDAR (*LAMBDA (X) (CDDAR X)))
   (CDDDR (*LAMBDA (X) (CDDDR X)))
   (CONS (*LAMBDA (X Y) (CONS X Y)))
   (LIST (*LAMBDA X X))
   (NOT (*LAMBDA (X) (NOT X)))
   (NULL (*LAMBDA (X) (NULL X)))
   (RPLACA (*LAMBDA (X Y) (RPLACA X Y)))
   (RPLACD (*LAMBDA (X Y) (RPLACD X Y)))
   (REVERSE (*LAMBDA (X) (REVERSE X)))
   (NREVERSE (*LAMBDA (X) (NREVERSE X)))
   (APPEND (*LAMBDA (X Y) (APPEND X Y)))
   (NCONC (*LAMBDA (X Y) (NCONC X Y)))
   (EQUAL (*LAMBDA (X Y) (EQUAL X Y)))
   (MEMBER (*LAMBDA (X Y) (MEMBER X Y)))
   (ASSOC (*LAMBDA (X Y) (ASSOC X Y)))
   (IMPLODE (*LAMBDA (X) (IMPLODE X)))
   (EXPLODE (*LAMBDA (X) (EXPLODE X)))
   (PRIN1 (*LAMBDA (X) (PRIN1 X)))
   (PRINT (*LAMBDA (X) (PRINT X)))
   (TERPRI (*LAMBDA () (TERPRI)))
   (READ (*LAMBDA () (READ)))
   (MAPCAR
     (*LAMBDA (*F *A)
       (LABEL
         ((MAP (LAMBDA (A R)
            (COND ((EQ A NIL) (NREVERSE R))
                  (T (MAP (CDR A)
                          (CONS (*F (CAR A)) R)))))))
        (MAP *A NIL))))
   (MAPCAR2
     (*LAMBDA (*F *A *B)
       (LABEL
         ((MAP (LAMBDA (A B R)
            (COND ((EQ A NIL) (NREVERSE R))
                  ((EQ B NIL) (NREVERSE R))
                  (T (MAP (CDR A)
                          (CDR B)
                          (CONS (*F (CAR A) (CAR B))
                                R)))))))   
        (MAP *A *B NIL)))) 
   (REDUCE        
     (*LAMBDA (*F *B *A)
       (LABEL
         ((RED (LAMBDA (A R)
            (COND ((EQ A NIL) R)
                  (T (RED (CDR A)
                          (*F R (CAR A))))))))
         (RED *A *B))))
   (RREDUCE
     (*LAMBDA (*F *B *A)
       (LABEL
          ((RED (LAMBDA (A R)
             (COND ((EQ A NIL) R)
                   (T (RED (CDR A)
                           (*F (CAR A) R)))))))
          (RED (REVERSE *A) *B)))))))

(TERPRI)
(PRINT "LISP INTERPRETER")

(LABEL
  ((LOOP (LAMBDA ()
     (PRINT (QUOTE GO))
     (SETQ *EXPR (READ))
     (PRINT (QUOTE STOP))
     (COND ((EQ *EXPR (QUOTE *STOP)))
           (T (TERPRI)
              (PRINT (EVAL *EXPR))
              (LOOP))))))
  (*LOAD (QUOTE LISINT))
  (LOOP)
  (SAVE)
  T)

*STOP
