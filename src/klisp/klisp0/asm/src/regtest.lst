PC     Output      Line
040000             0001  ; Register Test for KLISP
040000             0002  ; farting around with understanding 24bit addrs
040000             0003  ;
040000             0004  ; Author: Kristofer Younger
040000             0005  ;
040000             0006  ; Created: Fri 19 Apr 2025
040000             0007  
040000             0008  .assume adl=1
040000             0009  .org $040000
040000 5B C3 53 00 0010      jp.l start
       04          
040005             0011  
040005             0012  ; MOS header
040005             0013  .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 
040040 4D 4F 53 00 0014  .db "MOS",0,1
       01          
040045             0015  
040045             0016  ; ------------------------------
040045             0017  ; Constants and memory layout (from main.asm)
040045             0018  ; ------------------------------
040045             0019  NIL_ADDR:         equ     $050000   ; Address of NIL (special value)
040045             0020  T_ADDR:           equ     $050004   ; Address of T (boolean true)
040045             0021  SYMTAB_START:     equ     $05D000   ; Start of symbol table
040045             0022  
040045             0023  ; Atom flags and types
040045             0024  ATOM_FLAG:        equ     $008000     ; High bit indicates atom
040045             0025  SYM_FLAG:         equ     $004000     ; Symbol atom
040045             0026  
040045             0027  ; ------------------------------
040045             0028  ; Global variables
040045             0029  ; ------------------------------
040045             0030  heap_ptr:
040045 00 10 05    0031      .dw24 $051000                     ; HEAP_START
040048 00          0032      .db 0
040049             0033  
040049             0034  symtab_ptr:
040049 00 D0 05    0035      .dw24 SYMTAB_START                ; Current symbol table pointer
04004C 00          0036      .db 0
04004D             0037  
04004D             0038  ; Special symbols
04004D             0039  t_symbol:
04004D 04 00 05    0040      dw24 T_ADDR         ; T symbol address
040050             0041  nil_symbol:
040050 00 00 05    0042      DW24 NIL_ADDR       ; NIL symbol address
040053             0043  
040053             0044  ; ------------------------------
040053             0045  ; Program entry point
040053             0046  ; ------------------------------
040053             0047  start:
040053             0048      ; Set up stack
040053             0049      ;ld sp, $05F000                  ; STACK_START
040053             0050  
040053             0051  
040053 F5          0052      push af             ; store all the registers
040054 C5          0053      push bc
040055 D5          0054      push de
040056 DD E5       0055      push ix
040058 FD E5       0056      push iy
04005A             0057  
04005A             0058  ; ------------------
04005A             0059  ; This is our actual code
04005A             0060  
04005A 21 A1 00 04 0061      ld hl, hello       ; address of string to use
04005E 01 00 00 00 0062      ld bc,0             ; length of string, or 0 if a delimiter is used
040062 3E 00       0063      ld a,0              ; A is the delimiter
040064 5B DF       0064      rst.lil $18         ; Call the MOS API to send data to VDP
040066             0065  
040066             0066  
040066             0067      ; Initialize basic environment
040066 CD 76 00 04 0068      call init_test
04006A             0069  
04006A             0070  
04006A             0071      ; Exit the program
04006A FD E1       0072      pop iy              ; Pop all registers back from the stack
04006C DD E1       0073      pop ix
04006E D1          0074      pop de
04006F C1          0075      pop bc
040070 F1          0076      pop af
040071             0077  
040071 21 00 00 00 0078      ld hl, 0
040075 C9          0079      ret
040076             0080  
040076             0081  ; ------------------------------
040076             0082  ; Test initialization
040076             0083  ; ------------------------------
040076             0084  init_test:
040076             0085      ; Initialize NIL as a special atom
040076 21 00 00 05 0086      ld hl, NIL_ADDR
04007A 01 4E C0 00 0087      ld bc, ATOM_FLAG | SYM_FLAG | 'N'
04007E ED 0F       0088      ld (hl), bc                     ; CAR = ATOM_FLAG | SYM_FLAG | 'N'
040080 23          0089      inc hl
040081 23          0090      inc hl
040082 23          0091      inc hl
040083 01 00 00 00 0092      ld bc, 0
040087 ED 0F       0093      ld (hl), bc                     ; CDR = 0
040089             0094  
040089             0095      ; Initialize T as a special atom
040089 21 04 00 05 0096      ld hl, T_ADDR
04008D CD C1 00 04 0097      call print_hex_addr
040091 01 54 C0 00 0098      ld bc, ATOM_FLAG | SYM_FLAG | 'T'
040095 ED 0F       0099      ld (hl), bc                     ; CAR = ATOM_FLAG | SYM_FLAG | 'T'
040097 23          0100      inc hl
040098 23          0101      inc hl
040099 23          0102      inc hl
04009A 01 00 00 00 0103      ld bc, 0
04009E ED 0F       0104      ld (hl), bc                     ; CDR = 0
0400A0             0105  
0400A0 C9          0106      ret
0400A1             0107  
0400A1             0108  hello:
0400A1 52 65 67 54 0109      .db "RegTest\r\n",0
       65 73 74 0D 
       0A 00       
0400AB             0110  
0400AB             0111  INCLUDE "src/utils.asm"
0400AB             0001* 
0400AB             0002* ; ------------------------------
0400AB             0003* ; Utility functions
0400AB             0004* ; ------------------------------
0400AB             0005* hex_buffer:
0400AB             0006*     .ds 7        ; Room for 4 hex digits + null terminator
0400B2             0007* 
0400B2             0008* ; PRINT_STRING: Print a null-terminated string
0400B2             0009* ; Input: HL = pointer to string
0400B2             0010* ; Output: None
0400B2             0011* print_string:
       FF FF FF FF 
       FF FF FF 
0400B2 F5          0012*     push af
0400B3 C5          0013*     push bc
0400B4 E5          0014*     push hl
0400B5             0015* 
0400B5 01 00 00 00 0016*     ld bc, 0
0400B9 3E 00       0017*     ld a, 0
0400BB 5B DF       0018*     rst.lil $18
0400BD             0019* 
0400BD E1          0020*     pop hl
0400BE C1          0021*     pop bc
0400BF F1          0022*     pop af
0400C0 C9          0023*     ret
0400C1             0024* 
0400C1             0025* ; PRINT_HEX_ADDR: Print a 24-bit address in hexadecimal
0400C1             0026* ; Input: HL = address to print
0400C1             0027* ; Output: None
0400C1             0028* print_hex_addr:
0400C1 F5          0029*     push af
0400C2 C5          0030*     push bc
0400C3 D5          0031*     push de
0400C4 E5          0032*     push hl
0400C5             0033* 
0400C5             0034*     ; Convert to ASCII hex and store in buffer
0400C5 11 AB 00 04 0035*     ld de, hex_buffer
0400C9             0036* 
0400C9             0037*     ; High byte
0400C9 7C          0038*     ld a, h
0400CA CD E2 00 04 0039*     call .to_hex
0400CE             0040* 
0400CE             0041*     ; Middle byte
0400CE 7D          0042*     ld a, l
0400CF CD E2 00 04 0043*     call .to_hex
0400D3             0044* 
0400D3             0045*     ; Add null terminator
0400D3 AF          0046*     xor a
0400D4 12          0047*     ld (de), a
0400D5             0048* 
0400D5             0049*     ; Print the hex string
0400D5 21 AB 00 04 0050*     ld hl, hex_buffer
0400D9 CD B2 00 04 0051*     call print_string
0400DD             0052* 
0400DD E1          0053*     pop hl
0400DE D1          0054*     pop de
0400DF C1          0055*     pop bc
0400E0 F1          0056*     pop af
0400E1 C9          0057*     ret
0400E2             0058* 
0400E2             0059* .to_hex:
0400E2 F5          0060*     push af
0400E3 CB 3F       0061*     srl a
0400E5 CB 3F       0062*     srl a
0400E7 CB 3F       0063*     srl a
0400E9 CB 3F       0064*     srl a
0400EB CD FB 00 04 0065*     call .nibble
0400EF 12          0066*     ld (de), a
0400F0 13          0067*     inc de
0400F1             0068* 
0400F1 F1          0069*     pop af
0400F2 E6 0F       0070*     and $0F
0400F4 CD FB 00 04 0071*     call .nibble
0400F8 12          0072*     ld (de), a
0400F9 13          0073*     inc de
0400FA C9          0074*     ret
0400FB             0075* 
0400FB             0076* .nibble:
0400FB FE 0A       0077*     cp 10
0400FD 38 03       0078*     jr c, .digit
0400FF C6 37       0079*     add 'A' - 10
040101 C9          0080*     ret
040102             0081* .digit:
040102 C6 30       0082*     add '0'
040104 C9          0083*     ret
